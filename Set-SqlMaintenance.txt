function Set-SqlMaintenance
{
    <#
    .SYNOPSIS
    Creates a maintenance solution for a SQL Server instance.

    .DESCRIPTION
    This script creates database objects and jobs required to execute and
    schedule SQL Server maintenance operations using Ola Hallengren's SQL
    Server Maintenance Solution (https://ola.hallengren.com/). Maintenance
    objects are created on a target instance, and jobs are scheduled on
    the master instance. Maintenance operations involve index and
    statistics optimization, database integrity checks, full database,
    differential database, transaction log backup, log file and history cleanup.
    If maintenance objects already exist on a target instance, they will
    be dropped and recreated. If jobs already exist on the master instance,
    they will be dropped and recreated.

    .PARAMETER Master
    SQL Server instance name where jobs are to be created and scheduled.

    .PARAMETER Targets
    Array of SQL Server instance names where maintenance is performed.
    Maintenance objects (log table and stored procedures) are created
    on the target instance.

    .PARAMETER BackupCleanupDays
    Number of days after which backup files will be removed.

    .PARAMETER MaintenanceScriptDirectory
    Folder where data definition language (DDL) scripts are stored. DDL
    scripts are used to create maintenance objects on the target instance.
    To upgrade to a newer version of the maintenance solution, use the
    -Upgrade parameter.

    .PARAMETER Upgrade
    Indicates whether current versions of the maintenance solution scripts
    should be downloaded to the -MaintenanceScriptDirectory location.

    .PARAMETER NotifyLevel
    Defines job status upon which an email notification should be sent.

    .PARAMETER OperatorName
    Name of the SQL Server operator that should receive job status notification.
    Operator will be created if it does not exist using the OperatorEmail
    parameter value.

    .PARAMETER OperatorEmail
    Email address of the operator defined in SQL Server.

    .EXAMPLE
    Set-SqlMaintenance -Master JobServer -Target DevelopmentServer

    Maintenance objects are created on DevelopmentServer instance. SQL Server
    agent jobs created and scheduled on JobServer instance.

    .EXAMPLE
    Set-SqlMaintenance -Master JobServer -Target DevelopmentServer -Upgrade

    Maintenance solution scripts are downloaded and stored in the ".\sql"
    directory. Maintenance objects are created on DevelopmentServer instance. SQL
    Server agent jobs created and scheduled on JobServer instance.

    .EXAMPLE
    Set-SqlMaintenance -Master JobServer -Target "DevelopmentServer1", "DevelopmentServer2"

    Maintenance objects are created on DevelopmentServer1, and DevelopmentServer2 instances. SQL Server agent jobs created and scheduled on JobServer instance.

    .LINK
    SQL Server Maintenance Solution
    https://ola.hallengren.com
    #>

    # define expected arguments
    [CmdletBinding()]
    param (
        [Parameter()]
        [string]$Master,
        [Parameter(Mandatory=$True, ValueFromPipeline=$True)]
        [Alias("Target")]
        [string[]]$Targets,
        [Parameter()]
        [int]$BackupCleanupDays=8,
        [Parameter()]
        [string]$MaintenanceScriptDirectory="$ResourcePath\SQL Server Maintenance Solution",
        [Parameter()]
        [switch]$Upgrade,
        [Parameter()]
        [ValidateSet("Never", "Success", "Failure", "Always")]
        [string]$NotifyLevel="Never",
        [Parameter()]
        [string]$OperatorName,
        [Parameter()]
        [ValidatePattern("^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$")]
        [string]$OperatorEmail
    )
    begin {}
    process
    {
        if ($Upgrade)
        {
            Get-SqlServerMaintenanceScripts
        }

        # initialize SMO objects for later use
        $smo_server = [Microsoft.SqlServer.Management.SMO.Server]
        $smo_database = [Microsoft.SqlServer.Management.SMO.Database]
        $smo_login = [Microsoft.SqlServer.Management.SMO.Login]
        $smo_storedprocedure = [Microsoft.SqlServer.Management.SMO.StoredProcedure]
        $smo_table = [Microsoft.SqlServer.Management.SMO.Table]
        $smo_job = [Microsoft.SqlServer.Management.SMO.Agent.Job]
        $smo_jobschedule = [Microsoft.SqlServer.Management.SMO.Agent.JobSchedule]
        $smo_jobstep = [Microsoft.SqlServer.Management.SMO.Agent.JobStep]
        $smo_stepcompletion = [Microsoft.SqlServer.Management.SMO.Agent.StepCompletionAction]
        $smo_completion = [Microsoft.SqlServer.Management.SMO.Agent.CompletionAction]

        # change master name to all uppercase for logging consistency and prepare connection
        if ($Master)
        {
            # boolean to determine if jobs created on alternate server from target
            $master_alternate = $true
            $master = $Master.ToUpper()
            Write-Debug -Message "Connecting to $master instance via SMO"
            $master_smo = New-Object($smo_server) $master

            # get configured error log path for master
            Write-Debug -Message "Getting $master SQL Server error log path"
            $master_errorlog = $master_smo.ErrorLogPath
        }
        else
        {
            $master_alternate = $false
        }
        foreach ($target in $Targets)
        {
            # check if alternate server specified for job creation
            if (!$master_alternate)
            {
                # no alternate specified, jobs should be created on target
                $master = $target.ToUpper()
                Write-Debug -Message "Connecting to $master instance via SMO"
                $master_smo = New-Object($smo_server) $master

                # get configured error log path for master
                Write-Debug -Message "Getting $master SQL Server error log path"
                $master_errorlog = $master_smo.ErrorLogPath
            }

            # check if master server error log path properly configured
            if (!$master_errorlog)
            {
                Throw "Error log path on $master instance needs to be configured"
            }
            Write-Debug -Message "Using $master error log path: $master_errorlog"


            # change target name to all uppercase for logging consistency and prepare connection
            $target = $target.ToUpper()
            Write-Debug -Message "Connecting to $target instance via SMO"
            $target_smo = New-Object($smo_server) $target

            # get configured backup path for target
            Write-Debug -Message "Getting $target SQL Server backup path"
            $target_backup = $target_smo.BackupDirectory
            if (!$target_backup)
            {
                Throw "Backup path on $target needs to be configured"
            }
            Write-Debug -Message "Found $target backup path: $target_backup"

            # get database object from smo
            $database_name = "master"
            $database = $target_smo.Databases[$database_name]

            # build collection of expected maintenance objects
            $schema = "dbo"
            $tables = @("CommandLog")
            $procedures = @("CommandExecute", "DatabaseBackup", "DatabaseIntegrityCheck", "IndexOptimize")

            # enumerate existing objects
            $objects = @()
            foreach ($table in $tables)
            {
                $object = $database.Tables[$table, $schema]
                if (($object | Measure-Object).Count -ne 0) { $objects += ,$object }
            }
            foreach ($procedure in $procedures)
            {
                $object = $database.StoredProcedures[$procedure, $schema]
                if (($object | Measure-Object).Count -ne 0) { $objects += ,$object }
            }

            # remove existing objects
            if ($objects)
            {
                foreach($object in $objects)
                {
                    # unroll object if necessary, required for powershell v2 compatibility
                    if ($object.GetType().Name -eq "Object[]") { $object = $object.Get(0) }
                    $message = "Dropping existing {0}.{1} object of type '{2}' in {3}.{4} database" -f
                               $object.Schema, $object.Name, ($object.GetType().Name), $target, $database.Name
                    Write-Debug -Message $message
                    $object.Drop()
                }
            }

            # enumerate maintenance object ddl files
            $scripts = Get-ChildItem -Path "$MaintenanceScriptDirectory\*.sql"
            Write-Debug -Message "Creating maintenance tables and procedures on $target"
            foreach ($script in $scripts)
            {
                $file = Join-Path $script.Directory $script.Name
                Write-Debug -Message "Running $script on $target"
                # create maintenance objects on target
                try
                {
                    $ErrorActionPreference = "Stop"
                    Invoke-Sqlcmd -InputFile $file -ServerInstance $target
                }
                catch
                {
                    Throw "Error executing DDL in $script script. $_"
                }
                Write-Debug -Message "Successfully executed $script script on $target.$($database.Name) database"
            }
            Write-Host "Successfully created $target maintenance objects"

            # calculate backup cleanup hours
            $backup_cleanup_hours = $BackupCleanupDays * 24

            # decide when job notifications should be sent
            switch ($NotifyLevel)
            {
                "Never" { $email_level = $smo_completion::Never; }
                "Success" { $email_level = $smo_completion::OnSuccess; }
                "Failure" { $email_level = $smo_completion::OnFailure; }
                "Always" { $email_level = $smo_completion::Always; }
            }

            # setup operator for maintenance job notifications
            $job_server = $master_smo.JobServer
            $operator_name = $null
            if ($NotifyLevel -ne "Never")
            {
                $operator = Confirm-SqlServerAgentOperator -JobServer $job_server -OperatorName $OperatorName -OperatorEmail $OperatorEmail
                $operator_name = $operator.Name
            }
            else
            {
                $message = "Ignoring operator since notifications should never be sent"
                Write-Debug -Message $message
            }

            # setup owner for maintenance job steps
            $owner = Get-SaServerPrincipalName -ServerInstance $master

            # define job, step, and schedule configurations
            $definitions =
            @(
              @{
                  'Name' = "$target - CommandLog Cleanup";
                  'Owner' = $owner;
                  'Category' = 'Database Maintenance';
                  'Description' = 'Source: https://ola.hallengren.com';
                  'EmailLevel' = $email_level;
                  'Operator' = $operator_name;
                  'Steps' =
                  @(
                      @{
                          'Name' = "CommandLog Cleanup";
                          'Command' = "sqlcmd -E -S $target -d master -Q `"DELETE FROM [dbo].[CommandLog] WHERE DATEDIFF(dd,StartTime,GETDATE()) > 30`" -b";
                          'OutputFileName' = "$master_errorlog\$($target.Replace("\","_"))_CommandLogCleanup_`$(ESCAPE_SQUOTE(JOBID))_`$(ESCAPE_SQUOTE(STRTDT))_`$(ESCAPE_SQUOTE(STRTTM)).txt";
                          'SubSystem' = 'CmdExec';
                          'OnSuccessAction' = $smo_stepcompletion::QuitWithSuccess;
                          'OnFailAction' = $smo_stepcompletion::QuitWithFailure;
                      }
                  );
                  'Schedule' =
                  @{
                      'FrequencyTypes' = 'Daily';
                      'FrequencyInterval' = 1;
                      'FrequencyRecurrenceFactor' = 0;
                      'FrequencyRelativeIntervals' = 0;
                      'FrequencySubDayTypes' = 'Once';
                      'FrequencySubDayInterval' = 0;
                      'ActiveStartDate' = [System.DateTime]::Today;
                      'ActiveEndDate' =  [System.DateTime]::MaxValue;
                      'ActiveStartTimeOfDay' = New-Object System.TimeSpan(21, 0, 0);
                      'ActiveEndTimeOfDay' = New-Object System.TimeSpan(23, 59, 59);
                  }
              },
              @{
                  'Name' = "$target - DatabaseBackup - SYSTEM_DATABASES - FULL";
                  'Owner' = $owner;
                  'Category' = 'Database Maintenance';
                  'Description' = 'Source: https://ola.hallengren.com';
                  'EmailLevel' = $email_level;
                  'Operator' = $operator_name;
                  'Steps' =
                  @(
                      @{
                          'Name' = "DatabaseBackup - SYSTEM_DATABASES - FULL";
                          'Command' = "sqlcmd -E -S $target -d master -Q `"EXECUTE [dbo].[DatabaseBackup] @Databases = 'SYSTEM_DATABASES', @Directory = NULL, @BackupType = 'FULL', @Verify = 'Y', @CleanupTime = $backup_cleanup_hours, @CheckSum = 'Y', @LogToTable = 'Y'`" -b";
                          'OutputFileName' = "$master_errorlog\$($target.Replace("\","_"))_DatabaseBackupSystemFull_`$(ESCAPE_SQUOTE(JOBID))_`$(ESCAPE_SQUOTE(STRTDT))_`$(ESCAPE_SQUOTE(STRTTM)).txt";
                          'SubSystem' = 'CmdExec';
                          'OnSuccessAction' = $smo_stepcompletion::QuitWithSuccess;
                          'OnFailAction' = $smo_stepcompletion::QuitWithFailure;
                      }
                  );
                  'Schedule' =
                  @{
                      'FrequencyTypes' = 'Daily';
                      'FrequencyInterval' = 1;
                      'FrequencyRecurrenceFactor' = 0;
                      'FrequencyRelativeIntervals' = 0;
                      'FrequencySubDayTypes' = 'Once';
                      'FrequencySubDayInterval' = 0;
                      'ActiveStartDate' = [System.DateTime]::Today;
                      'ActiveEndDate' =  [System.DateTime]::MaxValue;
                      'ActiveStartTimeOfDay' = New-Object System.TimeSpan(20, 0, 0);
                      'ActiveEndTimeOfDay' = New-Object System.TimeSpan(23, 59, 59);
                  }
              },
              @{
                  'Name' = "$target - DatabaseBackup - SYSTEM_DATABASES - LOG";
                  'Owner' = $owner;
                  'Category' = 'Database Maintenance';
                  'Description' = 'Source: https://ola.hallengren.com';
                  'EmailLevel' = $email_level;
                  'Operator' = $operator_name;
                  'Steps' =
                  @(
                      @{
                          'Name' = "DatabaseBackup - SYSTEM_DATABASES - LOG";
                          'Command' = "sqlcmd -E -S $target -d master -Q `"EXECUTE [dbo].[DatabaseBackup] @Databases = 'SYSTEM_DATABASES', @Directory = NULL, @BackupType = 'LOG', @Verify = 'Y', @CleanupTime = $backup_cleanup_hours, @CheckSum = 'Y', @LogToTable = 'Y', @ChangeBackupType = 'Y'`" -b";
                          'OutputFileName' = "$master_errorlog\$($target.Replace("\","_"))_DatabaseBackupSystemLog_`$(ESCAPE_SQUOTE(JOBID))_`$(ESCAPE_SQUOTE(STRTDT))_`$(ESCAPE_SQUOTE(STRTTM)).txt";
                          'SubSystem' = 'CmdExec';
                          'OnSuccessAction' = $smo_stepcompletion::QuitWithSuccess;
                          'OnFailAction' = $smo_stepcompletion::QuitWithFailure;
                      }
                  );
                  'Schedule' =
                  @{
                      'FrequencyTypes' = 'Daily';
                      'FrequencyInterval' = 1;
                      'FrequencyRecurrenceFactor' = 0;
                      'FrequencyRelativeIntervals' = 0;
                      'FrequencySubDayTypes' = 'Minute';
                      'FrequencySubDayInterval' = 15;
                      'ActiveStartDate' = [System.DateTime]::Today;
                      'ActiveEndDate' =  [System.DateTime]::MaxValue;
                      'ActiveStartTimeOfDay' = New-Object System.TimeSpan(0, 0, 0);
                      'ActiveEndTimeOfDay' = New-Object System.TimeSpan(23, 59, 59);
                  }
              },
              @{
                  'Name' = "$target - DatabaseBackup - USER_DATABASES - DIFF";
                  'Owner' = $owner;
                  'Category' = 'Database Maintenance';
                  'Description' = 'Source: https://ola.hallengren.com';
                  'EmailLevel' = $email_level;
                  'Operator' = $operator_name;
                  'Steps' =
                  @(
                      @{
                          'Name' = "DatabaseBackup - USER_DATABASES - DIFF";
                          'Command' = "sqlcmd -E -S $target -d master -Q `"EXECUTE [dbo].[DatabaseBackup] @Databases = 'USER_DATABASES', @Directory = NULL, @BackupType = 'DIFF', @Verify = 'Y', @CleanupTime = $backup_cleanup_hours, @CheckSum = 'Y', @LogToTable = 'Y', @ChangeBackupType = 'Y'`" -b";
                          'OutputFileName' = "$master_errorlog\$($target.Replace("\","_"))_DatabaseBackupUserDiff_`$(ESCAPE_SQUOTE(JOBID))_`$" + "(ESCAPE_SQUOTE(STRTDT))_`$" + "(ESCAPE_SQUOTE(STRTTM)).txt";
                          'SubSystem' = 'CmdExec';
                          'OnSuccessAction' = $smo_stepcompletion::QuitWithSuccess;
                          'OnFailAction' = $smo_stepcompletion::QuitWithFailure;
                      }
                  );
                  'Schedule' =
                  @{
                      'FrequencyTypes' = 'Weekly';
                      # run every day except sunday
                      'FrequencyInterval' = 126;
                      'FrequencyRecurrenceFactor' = 1;
                      'FrequencyRelativeIntervals' = 0;
                      'FrequencySubDayTypes' = 'Once';
                      'FrequencySubDayInterval' = 0;
                      'ActiveStartDate' = [System.DateTime]::Today;
                      'ActiveEndDate' =  [System.DateTime]::MaxValue;
                      'ActiveStartTimeOfDay' = New-Object System.TimeSpan(20, 0, 0);
                      'ActiveEndTimeOfDay' = New-Object System.TimeSpan(23, 59, 59);
                  }
              },
              @{
                  'Name' = "$target - DatabaseBackup - USER_DATABASES - FULL";
                  'Owner' = $owner;
                  'Category' = 'Database Maintenance';
                  'Description' = 'Source: https://ola.hallengren.com';
                  'EmailLevel' = $email_level;
                  'Operator' = $operator_name;
                  'Steps' =
                  @(
                      @{
                          'Name' = "DatabaseBackup - USER_DATABASES - FULL";
                          'Command' = "sqlcmd -E -S $target -d master -Q `"EXECUTE [dbo].[DatabaseBackup] @Databases = 'USER_DATABASES', @Directory = NULL, @BackupType = 'FULL', @Verify = 'Y', @CleanupTime = $backup_cleanup_hours, @CheckSum = 'Y', @LogToTable = 'Y'`" -b";
                          'OutputFileName' = "$master_errorlog\$($target.Replace("\","_"))_DatabaseBackupUserFull_`$(ESCAPE_SQUOTE(JOBID))_`$(ESCAPE_SQUOTE(STRTDT))_`$(ESCAPE_SQUOTE(STRTTM)).txt";
                          'SubSystem' = 'CmdExec';
                          'OnSuccessAction' = $smo_stepcompletion::QuitWithSuccess;
                          'OnFailAction' = $smo_stepcompletion::QuitWithFailure;
                      }
                  );
                  'Schedule' =
                  @{
                      'FrequencyTypes' = 'Weekly';
                      # run only on sunday
                      'FrequencyInterval' = 1;
                      'FrequencyRecurrenceFactor' = 1;
                      'FrequencyRelativeIntervals' = 0;
                      'FrequencySubDayTypes' = 'Once';
                      'FrequencySubDayInterval' = 0;
                      'ActiveStartDate' = [System.DateTime]::Today;
                      'ActiveEndDate' =  [System.DateTime]::MaxValue;
                      'ActiveStartTimeOfDay' = New-Object System.TimeSpan(20, 0, 0);
                      'ActiveEndTimeOfDay' = New-Object System.TimeSpan(23, 59, 59);
                  }
              },
              @{
                  'Name' = "$target - DatabaseBackup - USER_DATABASES - LOG";
                  'Owner' = $owner;
                  'Category' = 'Database Maintenance';
                  'Description' = 'Source: https://ola.hallengren.com';
                  'EmailLevel' = $email_level;
                  'Operator' = $operator_name;
                  'Steps' =
                  @(
                      @{
                          'Name' = "DatabaseBackup - USER_DATABASES - LOG";
                          'Command' = "sqlcmd -E -S $target -d master -Q `"EXECUTE [dbo].[DatabaseBackup] @Databases = 'USER_DATABASES', @Directory = NULL, @BackupType = 'LOG', @Verify = 'Y', @CleanupTime = $backup_cleanup_hours, @CheckSum = 'Y', @LogToTable = 'Y', @ChangeBackupType = 'Y'`" -b";
                          'OutputFileName' = "$master_errorlog\$($target.Replace("\","_"))_DatabaseBackupUserLog_`$(ESCAPE_SQUOTE(JOBID))_`$(ESCAPE_SQUOTE(STRTDT))_`$(ESCAPE_SQUOTE(STRTTM)).txt";
                          'SubSystem' = 'CmdExec';
                          'OnSuccessAction' = $smo_stepcompletion::QuitWithSuccess;
                          'OnFailAction' = $smo_stepcompletion::QuitWithFailure;
                      }
                  );
                  'Schedule' =
                  @{
                      'FrequencyTypes' = 'Daily';
                      'FrequencyInterval' = 1;
                      'FrequencyRecurrenceFactor' = 0;
                      'FrequencyRelativeIntervals' = 0;
                      'FrequencySubDayTypes' = 'Minute';
                      'FrequencySubDayInterval' = 15;
                      'ActiveStartDate' = [System.DateTime]::Today;
                      'ActiveEndDate' =  [System.DateTime]::MaxValue;
                      'ActiveStartTimeOfDay' = New-Object System.TimeSpan(0, 0, 0);
                      'ActiveEndTimeOfDay' = New-Object System.TimeSpan(23, 59, 59);
                  }
              },
              @{
                  'Name' = "$target - DatabaseIntegrityCheck - SYSTEM_DATABASES";
                  'Owner' = $owner;
                  'Category' = 'Database Maintenance';
                  'Description' = 'Source: https://ola.hallengren.com';
                  'EmailLevel' = $email_level;
                  'Operator' = $operator_name;
                  'Steps' =
                  @(
                      @{
                          'Name' = "DatabaseIntegrityCheck - SYSTEM_DATABASES";
                          'Command' = "sqlcmd -E -S $target -d master -Q `"EXECUTE [dbo].[DatabaseIntegrityCheck] @Databases = 'SYSTEM_DATABASES', @LogToTable = 'Y'`" -b";
                          'OutputFileName' = "$master_errorlog\$($target.Replace("\","_"))_DatabaseIntegrityCheckSystem_`$(ESCAPE_SQUOTE(JOBID))_`$(ESCAPE_SQUOTE(STRTDT))_`$(ESCAPE_SQUOTE(STRTTM)).txt";
                          'SubSystem' = 'CmdExec';
                          'OnSuccessAction' = $smo_stepcompletion::QuitWithSuccess;
                          'OnFailAction' = $smo_stepcompletion::QuitWithFailure;
                      }
                  );
                  'Schedule' =
                  @{
                      'FrequencyTypes' = 'Daily';
                      'FrequencyInterval' = 1;
                      'FrequencyRecurrenceFactor' = 0;
                      'FrequencyRelativeIntervals' = 0;
                      'FrequencySubDayTypes' = 'Once';
                      'FrequencySubDayInterval' = 0;
                      'ActiveStartDate' = [System.DateTime]::Today;
                      'ActiveEndDate' =  [System.DateTime]::MaxValue;
                      'ActiveStartTimeOfDay' = New-Object System.TimeSpan(19, 0, 0);
                      'ActiveEndTimeOfDay' = New-Object System.TimeSpan(23, 59, 59);
                  }
              },
              @{
                  'Name' = "$target - DatabaseIntegrityCheck - USER_DATABASES";
                  'Owner' = $owner;
                  'Category' = 'Database Maintenance';
                  'Description' = 'Source: https://ola.hallengren.com';
                  'EmailLevel' = $email_level;
                  'Operator' = $operator_name;
                  'Steps' =
                  @(
                      @{
                          'Name' = "DatabaseIntegrityCheck - USER_DATABASES";
                          'Command' = "sqlcmd -E -S $target -d master -Q `"EXECUTE [dbo].[DatabaseIntegrityCheck] @Databases = 'USER_DATABASES', @MaxDOP = 2, @LogToTable = 'Y'`" -b";
                          'OutputFileName' = "$master_errorlog\$($target.Replace("\","_"))_DatabaseIntegrityCheckUser_`$(ESCAPE_SQUOTE(JOBID))_`$(ESCAPE_SQUOTE(STRTDT))_`$(ESCAPE_SQUOTE(STRTTM)).txt";
                          'SubSystem' = 'CmdExec';
                          'OnSuccessAction' = $smo_stepcompletion::QuitWithSuccess;
                          'OnFailAction' = $smo_stepcompletion::QuitWithFailure;
                      }
                  );
                  'Schedule' =
                  @{
                      'FrequencyTypes' = 'Weekly';
                      'FrequencyInterval' = 1;
                      'FrequencyRecurrenceFactor' = 1;
                      'FrequencyRelativeIntervals' = 0;
                      'FrequencySubDayTypes' = 'Once';
                      'FrequencySubDayInterval' = 0;
                      'ActiveStartDate' = [System.DateTime]::Today;
                      'ActiveEndDate' =  [System.DateTime]::MaxValue;
                      'ActiveStartTimeOfDay' = New-Object System.TimeSpan(19, 0, 0);
                      'ActiveEndTimeOfDay' = New-Object System.TimeSpan(23, 59, 59);
                  }
              },
              @{
                  'Name' = "$target - IndexOptimize - SYSTEM_DATABASES";
                  'Owner' = $owner;
                  'Category' = 'Database Maintenance';
                  'Description' = 'Source: https://ola.hallengren.com';
                  'EmailLevel' = $email_level;
                  'Operator' = $operator_name;
                  'Steps' =
                  @(
                      @{
                          'Name' = "IndexOptimize - SYSTEM_DATABASES";
                          'Command' = "sqlcmd -E -S $target -d master -Q `"EXECUTE [dbo].[IndexOptimize] @Databases = 'SYSTEM_DATABASES', @UpdateStatistics = 'ALL', @OnlyModifiedStatistics = 'Y', @MSShippedObjects = 'Y', @LogToTable = 'Y', @TimeLimit = 3600, @WaitAtLowPriorityMaxDuration = 5, @WaitAtLowPriorityAbortAfterWait = 'SELF'`" -b";
                          'OutputFileName' = "$master_errorlog\$($target.Replace("\","_"))_IndexOptimizeSystem_`$(ESCAPE_SQUOTE(JOBID))_`$(ESCAPE_SQUOTE(STRTDT))_`$(ESCAPE_SQUOTE(STRTTM)).txt";
                          'SubSystem' = 'CmdExec';
                          'OnSuccessAction' = $smo_stepcompletion::QuitWithSuccess;
                          'OnFailAction' = $smo_stepcompletion::QuitWithFailure;
                      }
                  );
                  'Schedule' =
                  @{
                      'FrequencyTypes' = 'Weekly';
                      'FrequencyInterval' = 1;
                      'FrequencyRecurrenceFactor' = 1;
                      'FrequencyRelativeIntervals' = 0;
                      'FrequencySubDayTypes' = 'Once';
                      'FrequencySubDayInterval' = 0;
                      'ActiveStartDate' = [System.DateTime]::Today;
                      'ActiveEndDate' =  [System.DateTime]::MaxValue;
                      'ActiveStartTimeOfDay' = New-Object System.TimeSpan(18, 0, 0);
                      'ActiveEndTimeOfDay' = New-Object System.TimeSpan(23, 59, 59);
                  }
              },
              @{
                  'Name' = "$target - IndexOptimize - USER_DATABASES";
                  'Owner' = $owner;
                  'Category' = 'Database Maintenance';
                  'Description' = 'Source: https://ola.hallengren.com';
                  'EmailLevel' = $email_level;
                  'Operator' = $operator_name;
                  'Steps' =
                  @(
                      @{
                          'Name' = "IndexOptimize - USER_DATABASES";
                          'Command' = "sqlcmd -E -S $target -d master -Q `"EXECUTE [dbo].[IndexOptimize] @Databases = 'USER_DATABASES', @UpdateStatistics = 'ALL', @OnlyModifiedStatistics = 'Y', @LogToTable = 'Y', @TimeLimit = 3600, @WaitAtLowPriorityMaxDuration = 5, @WaitAtLowPriorityAbortAfterWait = 'SELF'`" -b";
                          'OutputFileName' = "$master_errorlog\$($target.Replace("\","_"))_IndexOptimizeUser_`$(ESCAPE_SQUOTE(JOBID))_`$(ESCAPE_SQUOTE(STRTDT))_`$(ESCAPE_SQUOTE(STRTTM)).txt";
                          'SubSystem' = 'CmdExec';
                          'OnSuccessAction' = $smo_stepcompletion::QuitWithSuccess;
                          'OnFailAction' = $smo_stepcompletion::QuitWithFailure;
                      }
                  );
                  'Schedule' =
                  @{
                      'FrequencyTypes' = 'Daily';
                      'FrequencyInterval' = 1;
                      'FrequencyRecurrenceFactor' = 1;
                      'FrequencyRelativeIntervals' = 0;
                      'FrequencySubDayTypes' = 'Once';
                      'FrequencySubDayInterval' = 0;
                      'ActiveStartDate' = [System.DateTime]::Today;
                      'ActiveEndDate' =  [System.DateTime]::MaxValue;
                      'ActiveStartTimeOfDay' = New-Object System.TimeSpan(18, 0, 0);
                      'ActiveEndTimeOfDay' = New-Object System.TimeSpan(23, 59, 59);
                  }
              },
              @{
                  'Name' = "$target - Output File Cleanup";
                  'Owner' = $owner;
                  'Category' = 'Database Maintenance';
                  'Description' = 'Source: https://ola.hallengren.com';
                  'EmailLevel' = $email_level;
                  'Operator' = $operator_name;
                  'Steps' =
                  @(
                      @{
                          'Name' = "Output File Cleanup";
                          'Command' = "cmd /q /c `"For /F `"tokens=1 delims=`" %v In ('ForFiles /P `"$master_errorlog`" /m $($target)_*_*_*_*.txt /d -30 2^>^&1') do if EXIST `"$master_errorlog`"\%v echo del `"$master_errorlog`"\%v& del `"$master_errorlog`"\%v`"";
                          'OutputFileName' = "$master_errorlog\$($target.Replace("\","_"))_OutputFileCleanup_`$(ESCAPE_SQUOTE(JOBID))_`$(ESCAPE_SQUOTE(STRTDT))_`$(ESCAPE_SQUOTE(STRTTM)).txt";
                          'SubSystem' = 'CmdExec';
                          'OnSuccessAction' = $smo_stepcompletion::QuitWithSuccess;
                          'OnFailAction' = $smo_stepcompletion::QuitWithFailure;
                      }
                  );
                  'Schedule' =
                  @{
                      'FrequencyTypes' = 'Daily';
                      'FrequencyInterval' = 1;
                      'FrequencyRecurrenceFactor' = 0;
                      'FrequencyRelativeIntervals' = 0;
                      'FrequencySubDayTypes' = 'Once';
                      'FrequencySubDayInterval' = 0;
                      'ActiveStartDate' = [System.DateTime]::Today;
                      'ActiveEndDate' =  [System.DateTime]::MaxValue;
                      'ActiveStartTimeOfDay' = New-Object System.TimeSpan(21, 0, 0);
                      'ActiveEndTimeOfDay' = New-Object System.TimeSpan(23, 59, 59);
                  }
              },
              @{
                  'Name' = "$target - sp_delete_backuphistory";
                  'Owner' = $owner;
                  'Category' = 'Database Maintenance';
                  'Description' = 'Source: https://ola.hallengren.com';
                  'EmailLevel' = $email_level;
                  'Operator' = $operator_name;
                  'Steps' =
                  @(
                      @{
                          'Name' = "sp_delete_backuphistory";
                          'Command' = "sqlcmd -E -S $target -d msdb -Q `"DECLARE @CleanupDate datetime SET @CleanupDate = DATEADD(dd,-30,GETDATE()) EXECUTE dbo.sp_delete_backuphistory @oldest_date = @CleanupDate`" -b";
                          'OutputFileName' = "$master_errorlog\$($target.Replace("\","_"))_sp_delete_backuphistory_`$(ESCAPE_SQUOTE(JOBID))_`$(ESCAPE_SQUOTE(STRTDT))_`$(ESCAPE_SQUOTE(STRTTM)).txt";
                          'SubSystem' = 'CmdExec';
                          'OnSuccessAction' = $smo_stepcompletion::QuitWithSuccess;
                          'OnFailAction' = $smo_stepcompletion::QuitWithFailure;
                      }
                  );
                  'Schedule' =
                  @{
                      'FrequencyTypes' = 'Daily';
                      'FrequencyInterval' = 1;
                      'FrequencyRecurrenceFactor' = 0;
                      'FrequencyRelativeIntervals' = 0;
                      'FrequencySubDayTypes' = 'Once';
                      'FrequencySubDayInterval' = 0;
                      'ActiveStartDate' = [System.DateTime]::Today;
                      'ActiveEndDate' =  [System.DateTime]::MaxValue;
                      'ActiveStartTimeOfDay' = New-Object System.TimeSpan(21, 5, 0);
                      'ActiveEndTimeOfDay' = New-Object System.TimeSpan(23, 59, 59);
                  }
              },
              @{
                  'Name' = "$target - sp_purge_jobhistory";
                  'Owner' = $owner;
                  'Category' = 'Database Maintenance';
                  'Description' = 'Source: https://ola.hallengren.com';
                  'EmailLevel' = $email_level;
                  'Operator' = $operator_name;
                  'Steps' =
                  @(
                      @{
                          'Name' = "sp_purge_jobhistory";
                          'Command' = "sqlcmd -E -S $target -d msdb -Q `"DECLARE @CleanupDate datetime SET @CleanupDate = DATEADD(dd,-30,GETDATE()) EXECUTE dbo.sp_purge_jobhistory @oldest_date = @CleanupDate`" -b";
                          'OutputFileName' = "$master_errorlog\$($target.Replace("\","_"))_sp_purge_jobhistory_`$(ESCAPE_SQUOTE(JOBID))_`$(ESCAPE_SQUOTE(STRTDT))_`$(ESCAPE_SQUOTE(STRTTM)).txt";
                          'SubSystem' = 'CmdExec';
                          'OnSuccessAction' = $smo_stepcompletion::QuitWithSuccess;
                          'OnFailAction' = $smo_stepcompletion::QuitWithFailure;
                      }
                  );
                  'Schedule' =
                  @{
                      'FrequencyTypes' = 'Daily';
                      'FrequencyInterval' = 1;
                      'FrequencyRecurrenceFactor' = 0;
                      'FrequencyRelativeIntervals' = 0;
                      'FrequencySubDayTypes' = 'Once';
                      'FrequencySubDayInterval' = 0;
                      'ActiveStartDate' = [System.DateTime]::Today;
                      'ActiveEndDate' =  [System.DateTime]::MaxValue;
                      'ActiveStartTimeOfDay' = New-Object System.TimeSpan(21, 0, 0);
                      'ActiveEndTimeOfDay' = New-Object System.TimeSpan(23, 59, 59);
                  }
              },
              @{
                  'Name' = "$target - Reinitialize error logs";
                  'Owner' = $owner;
                  'Category' = 'Database Maintenance';
                  'Description' = 'Source: https://ola.hallengren.com';
                  'EmailLevel' = $email_level;
                  'Operator' = $operator_name;
                  'Steps' =
                  @(
                      @{
                          'Name' = "sp_cycle_errorlog";
                          'Command' = "sqlcmd -E -S $target -d master -Q `"EXECUTE dbo.sp_cycle_errorlog`" -b";
                          'OutputFileName' = "$master_errorlog\$($target.Replace("\","_"))_sp_cycle_errorlog_`$(ESCAPE_SQUOTE(JOBID))_`$(ESCAPE_SQUOTE(STRTDT))_`$(ESCAPE_SQUOTE(STRTTM)).txt";
                          'SubSystem' = 'CmdExec';
                          'OnSuccessAction' = $smo_stepcompletion::GoToNextStep;
                          'OnFailAction' = $smo_stepcompletion::QuitWithFailure;
                      },
                      @{
                          'Name' = "sp_cycle_agent_errorlog";
                          'Command' = "sqlcmd -E -S $target -d msdb -Q `"EXECUTE dbo.sp_cycle_agent_errorlog`" -b";
                          'OutputFileName' = "$master_errorlog\$($target.Replace("\","_"))_sp_cycle_agent_errorlog_`$(ESCAPE_SQUOTE(JOBID))_`$(ESCAPE_SQUOTE(STRTDT))_`$(ESCAPE_SQUOTE(STRTTM)).txt";
                          'SubSystem' = 'CmdExec';
                          'OnSuccessAction' = $smo_stepcompletion::QuitWithSuccess;
                          'OnFailAction' = $smo_stepcompletion::QuitWithFailure;
                      }
                  );
                  'Schedule' =
                  @{
                      'FrequencyTypes' = 'Weekly';
                      'FrequencyInterval' = 1;
                      'FrequencyRecurrenceFactor' = 2;
                      'FrequencyRelativeIntervals' = 0;
                      'FrequencySubDayTypes' = 'Once';
                      'FrequencySubDayInterval' = 0;
                      'ActiveStartDate' = [System.DateTime]::Today;
                      'ActiveEndDate' =  [System.DateTime]::MaxValue;
                      'ActiveStartTimeOfDay' = New-Object System.TimeSpan(0, 0, 0);
                      'ActiveEndTimeOfDay' = New-Object System.TimeSpan(23, 59, 59);
                  }
              }
            )

            Write-Debug -Message "Creating agent jobs on $master for $target"
            # loop through job configurations
            foreach ($definition in $definitions)
            {
              # check target server version and replace unsupported parameters on affected job steps
              if ($target_smo.Version.Major -lt 12 -and $definition.Name.Contains("IndexOptimize"))
              {
                  $definition.Steps[0].Command = $definition.Steps[0].Command.Replace(", @WaitAtLowPriorityMaxDuration = 5, @WaitAtLowPriorityAbortAfterWait = 'SELF'", "")
              }

              # check if specified owner exists
              Write-Debug -Message "Checking existence of $($definition.Owner) server principal"
              $login = $master_smo.Logins |
                       where-object {$_.Name -eq $definition.Owner}
              if (-not $login)
              {
                  Throw "Specified job owner $($definition.Owner) does not exist"
              }
              # drop job if already exists based on name
              Write-Debug -Message "Checking existence of $($definition.Name) job"
              $existing = $master_smo.JobServer.Jobs |
                          where-object {$_.Name -eq $definition.Name}
              if ($existing)
              {
                  $existing.Drop()
                  Write-Debug -Message "Deleted existing $($definition.Name) job"
              }
              # define job properties from configuration and create
              Write-Debug -Message "Creating job $($definition.Name) on $master for $target"
              try
              {
                  $job = New-Object $smo_job($master_smo.JobServer, $definition.Name)
                  $job.OwnerLoginName = $definition.Owner
                  $job.Category = $definition.Category
                  $job.Description = $definition.Description
                  $job.EmailLevel = $definition.EmailLevel
                  $job.OperatorToEmail = $definition.Operator
                  $job.Create()
                  # support job creation on instances where port number is supplied
                  $job.ApplyToTargetServer("$master".split(',')[0])
              }
              catch
              {
                  $exception = $_.Exception
                  while ($exception.InnerException)
                  {
                      $exception = $exception.InnerException
                  }
                  Throw "Error creating $($definition.Name) job. $exception.Message"
              }

              # loop through job step configurations
              foreach ($step_definition in $definition.Steps)
              {
                  #define job step properties from configuration and create
                  Write-Debug -Message "Creating $($step_definition.Name) job step for $($definition.Name) job"
                  try
                  {
                      $jobstep = New-Object $smo_jobstep($job, $step_definition.Name)
                      $jobstep.Command = $step_definition.Command
                      $jobstep.OutputFileName = $step_definition.OutputFileName
                      $jobstep.SubSystem = $step_definition.SubSystem
                      $jobstep.OnSuccessAction = $step_definition.OnSuccessAction
                      $jobstep.OnFailAction = $step_definition.OnFailAction
                      $jobstep.Create()
                  }
                  catch
                  {
                      Throw "Error creating $($step_definition.Name) job step for $($definition.Name) job. $_"
                  }
              }

              # define job schedule
              Write-Debug -Message "Creating $($definition.Name) job schedule for $($definition.Name) job"
              try
              {
                  $jobschedule = New-Object $smo_jobschedule($job, $definition.Name)
                  $jobschedule.FrequencyTypes = $definition.Schedule.FrequencyTypes
                  $jobschedule.FrequencyInterval = $definition.Schedule.FrequencyInterval
                  $jobschedule.FrequencyRecurrenceFactor = $definition.Schedule.FrequencyRecurrenceFactor
                  $jobschedule.FrequencyRelativeIntervals = $definition.Schedule.FrequencyRelativeIntervals
                  $jobschedule.FrequencySubDayTypes = $definition.Schedule.FrequencySubDayTypes
                  $jobschedule.FrequencySubDayInterval = $definition.Schedule.FrequencySubDayInterval
                  $jobschedule.ActiveStartDate = $definition.Schedule.ActiveStartDate
                  $jobschedule.ActiveEndDate = $definition.Schedule.ActiveEndDate
                  $jobschedule.ActiveStartTimeOfDay = $definition.Schedule.ActiveStartTimeOfDay
                  $jobschedule.ActiveEndTimeOfDay = $definition.Schedule.ActiveEndTimeOfDay
                  $jobschedule.Create()
              }
              catch
              {
                  Throw "Error creating $($definition.Name) job schedule. $_"
              }
              # check if job created in server collection
              if ($master_smo.JobServer.Jobs[$definition.Name])
              {
                  Write-Debug -Message "Created $($definition.Name) job successfully"
              }
            }
            Write-Host "Successfully created $master maintenance jobs for $target"
        }
    }
    end {}
}
